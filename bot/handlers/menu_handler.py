import os
import django
import sys
from datetime import datetime, date, time
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from io import BytesIO

BACKEND_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'backend'))
if BACKEND_ROOT not in sys.path:
    sys.path.insert(0, BACKEND_ROOT)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from job.models import Customer, JobDays, JobHours, JobOvertimeHours, Advance, Dispute, HourlyRate
from django.core.files import File

menu_router = Router()


def get_employee_menu():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üü¢ –ü—Ä–∏—Ö–æ–¥', callback_data='check_in')],
            [InlineKeyboardButton(text='üî¥ –£—Ö–æ–¥', callback_data='check_out')],
            [InlineKeyboardButton(text='‚è∞ –°–≤–µ—Ä—Ö—É—Ä–æ—á–∫–∞', callback_data='overtime_menu')],
            [InlineKeyboardButton(text='üí∞ –ê–≤–∞–Ω—Å', callback_data='advance_request')],
            [InlineKeyboardButton(text='üíµ –ú–æ–∏ –¥–µ–Ω—å–≥–∏', callback_data='my_money')],
            [InlineKeyboardButton(text='‚ö° –ü–æ–¥–∞—Ç—å —Å–ø–æ—Ä', callback_data='dispute_request')]
        ]
    )


def get_overtime_menu():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üü¢ –ù–∞—á–∞—Ç—å —Å–≤–µ—Ä—Ö—É—Ä–æ—á–∫—É', callback_data='overtime_start')],
            [InlineKeyboardButton(text='üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–≤–µ—Ä—Ö—É—Ä–æ—á–∫—É', callback_data='overtime_end')],
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')]
        ]
    )


def get_location_keyboard():
    """Reply keyboard —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é', request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )


class CheckInStates(StatesGroup):
    waiting_geolocation = State()
    waiting_selfie = State()


class OvertimeStates(StatesGroup):
    waiting_overtime_start = State()
    waiting_overtime_end = State()
    waiting_overtime_proof = State()


class AdvanceStates(StatesGroup):
    waiting_amount = State()
    waiting_reason = State()


class DisputeStates(StatesGroup):
    waiting_reason = State()


@menu_router.message(Command('menu'))
async def show_menu(message: Message):
    customer = await sync_to_async(Customer.objects.filter(tg_id=message.from_user.id).first)()

    if customer:
        await message.answer(
            'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n'
            'üü¢ –ü—Ä–∏—Ö–æ–¥ - –æ—Ç–º–µ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è\n'
            'üî¥ –£—Ö–æ–¥ - –æ—Ç–º–µ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è\n'
            '‚è∞ –°–≤–µ—Ä—Ö—É—Ä–æ—á–∫–∞ - —Ä–∞–±–æ—Ç–∞ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n'
            'üí∞ –ê–≤–∞–Ω—Å - –∑–∞–ø—Ä–æ—Å –∞–≤–∞–Ω—Å–∞\n'
            'üíµ –ú–æ–∏ –¥–µ–Ω—å–≥–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–ø–ª–∞—Ç–µ\n'
            '‚ö° –°–ø–æ—Ä - –ø–æ–¥–∞—á–∞ —Å–ø–æ—Ä–∞ –ø–æ –æ—Ç–º–µ—Ç–∫–∞–º',
            reply_markup=get_employee_menu()
        )
    else:
        await message.answer('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')


@menu_router.callback_query(F.data == 'back_to_main')
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_employee_menu()
    )
    await callback.answer()


@menu_router.callback_query(F.data == 'overtime_menu')
async def overtime_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        '‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π:\n\n'
        '‚Ä¢ –ù–∞—á–∞—Ç—å —Å–≤–µ—Ä—Ö—É—Ä–æ—á–∫—É - –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—á–µ—Ç —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n'
        '‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–≤–µ—Ä—Ö—É—Ä–æ—á–∫—É - –∑–∞–≤–µ—Ä—à–∏—Ç—å —É—á–µ—Ç\n',
        reply_markup=get_overtime_menu()
    )
    await callback.answer()


@menu_router.callback_query(F.data == 'check_in')
async def start_check_in(callback: CallbackQuery, state: FSMContext):
    customer = await sync_to_async(Customer.objects.filter(tg_id=callback.from_user.id).first)()
    if not customer:
        await callback.answer('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
        return

    today = date.today()
    job_day = await sync_to_async(JobDays.objects.filter(date=today).first)()

    if not job_day:
        await callback.answer('‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')
        return

    existing_entry = await sync_to_async(JobHours.objects.filter(customer=customer, date=job_day).first)()
    if existing_entry and existing_entry.work_start:
        await callback.answer('‚úÖ –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è')
        return

    await state.set_state(CheckInStates.waiting_geolocation)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
    await callback.message.answer(
        'üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è (—ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞).',
        reply_markup=get_location_keyboard()
    )
    await callback.answer()


@menu_router.message(CheckInStates.waiting_geolocation, F.location)
async def process_geolocation(message: Message, state: FSMContext):
    location = message.location
    geo_url = f"https://maps.google.com/?q={location.latitude},{location.longitude}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏ –ø—Ä–æ—Å–∏–º —Å–µ–ª—Ñ–∏; —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await state.update_data(geolocation=geo_url)
    await state.set_state(CheckInStates.waiting_selfie)

    await message.answer('üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', reply_markup=ReplyKeyboardRemove())


@menu_router.message(CheckInStates.waiting_selfie, F.photo)
async def process_selfie(message: Message, state: FSMContext):
    customer = await sync_to_async(Customer.objects.filter(tg_id=message.from_user.id).first)()
    today = date.today()
    job_day = await sync_to_async(JobDays.objects.filter(date=today).first)()

    data = await state.get_data()
    geolocation = data.get('geolocation', '')

    if not customer:
        await message.answer('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
        await state.clear()
        return

    if not job_day:
        await message.answer('‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')
        await state.clear()
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    downloaded_file = await message.bot.download_file(file_info.file_path)

    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    filename = f"selfie_{customer.tg_id}_{today.strftime('%Y%m%d_%H%M%S')}.jpg"

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç File –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ImageField
    image_file = File(BytesIO(downloaded_file.read()), name=filename)

    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    job_hours = JobHours(
        customer=customer,
        date=job_day,
        work_start=datetime.now().time(),
        geolocation=geolocation,
    )

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    await sync_to_async(job_hours.save)()
    # –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await sync_to_async(job_hours.selfie.save)(filename, image_file, save=True)

    await state.clear()
    # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞
    await message.answer('‚úÖ –ü—Ä–∏—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=ReplyKeyboardRemove())
    await show_menu(message)


@menu_router.callback_query(F.data == 'check_out')
async def process_check_out(callback: CallbackQuery):
    customer = await sync_to_async(
        Customer.objects.filter(tg_id=callback.from_user.id).first
    )()
    today = date.today()
    job_day = await sync_to_async(
        JobDays.objects.filter(date=today).first
    )()

    if not job_day:
        await callback.answer('‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')
        return

    job_entry = await sync_to_async(
        JobHours.objects.filter(customer=customer, date=job_day).first
    )()

    if not job_entry:
        await callback.answer('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Ö–æ–¥')
        return

    now_time = datetime.now().time()
    default_end = time(19, 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ —Ä–µ–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–Ω–µ –¥–µ—Ñ–æ–ª—Ç)
    if job_entry.work_end and job_entry.work_end != default_end:
        await callback.answer('‚úÖ –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —É—Ö–æ–¥')
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–π—Ç–∏ —Ä–∞–Ω—å—à–µ 19:00 ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ–≥–æ –≤—Ä–µ–º—è
    if now_time < default_end:
        job_entry.work_end = now_time
        await sync_to_async(job_entry.save)()
        await callback.answer(f'‚úÖ –£—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now_time.strftime("%H:%M")}')
        return

    # –ï—Å–ª–∏ –ø–æ–∑–∂–µ 19:00 ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ 19:00
    job_entry.work_end = default_end
    await sync_to_async(job_entry.save)()
    await callback.answer('‚úÖ –ê–≤—Ç–æ-—É—Ö–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 19:00')

    customer = await sync_to_async(Customer.objects.filter(tg_id=callback.from_user.id).first)()
    today = date.today()
    job_day = await sync_to_async(JobDays.objects.filter(date=today).first)()

    if not job_day:
        await callback.answer('‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')
        return

    job_entry = await sync_to_async(JobHours.objects.filter(customer=customer, date=job_day).first)()

    if not job_entry:
        await callback.answer('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Ö–æ–¥')
        return
    
    now_time = datetime.now().time()

    if job_entry.work_end and now_time > time(19, 0):
        await callback.answer('‚úÖ –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —É—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è')
        return

    job_entry.work_end = datetime.now().time()
    await sync_to_async(job_entry.save)()

    await callback.answer('‚úÖ –£—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')


@menu_router.callback_query(F.data == 'overtime_start')
async def start_overtime(callback: CallbackQuery, state: FSMContext):
    customer = await sync_to_async(Customer.objects.filter(tg_id=callback.from_user.id).first)()
    today = date.today()
    job_day = await sync_to_async(JobDays.objects.filter(date=today).first)()

    if not job_day:
        await callback.answer('‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')
        return

    existing_overtime = await sync_to_async(
        JobOvertimeHours.objects.filter(customer=customer, date=job_day, work_end__isnull=True).first
    )()

    if existing_overtime:
        await callback.answer('‚ùå –°–≤–µ—Ä—Ö—É—Ä–æ—á–∫–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞')
        return

    overtime = JobOvertimeHours(
        customer=customer,
        date=job_day,
        work_start=datetime.now().time()
    )
    await sync_to_async(overtime.save)()

    await state.set_state(OvertimeStates.waiting_overtime_end)
    await callback.message.answer(
        '‚è∞ –°–≤–µ—Ä—Ö—É—Ä–æ—á–∫–∞ –Ω–∞—á–∞—Ç–∞! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–≤–µ—Ä—Ö—É—Ä–æ—á–∫—É"'
    )
    await callback.answer()


@menu_router.callback_query(F.data == 'overtime_end')
async def end_overtime(callback: CallbackQuery, state: FSMContext):
    customer = await sync_to_async(Customer.objects.filter(tg_id=callback.from_user.id).first)()
    today = date.today()
    job_day = await sync_to_async(JobDays.objects.filter(date=today).first)()

    overtime = await sync_to_async(
        JobOvertimeHours.objects.filter(customer=customer, date=job_day, work_end__isnull=True).first
    )()

    if not overtime:
        await callback.answer('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–≤–µ—Ä—Ö—É—Ä–æ—á–∫–∏')
        return

    overtime.work_end = datetime.now().time()
    await sync_to_async(overtime.save)()

    await state.set_state(OvertimeStates.waiting_overtime_proof)
    await callback.message.answer(
        'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã'
    )
    await callback.answer()


@menu_router.message(OvertimeStates.waiting_overtime_proof)
async def process_overtime_proof(message: Message, state: FSMContext):
    customer = await sync_to_async(Customer.objects.filter(tg_id=message.from_user.id).first)()
    today = date.today()
    job_day = await sync_to_async(JobDays.objects.filter(date=today).first)()

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—Ä—Ö—É—Ä–æ—á–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –¥–Ω—è
    overtime = await sync_to_async(
        JobOvertimeHours.objects.filter(customer=customer, date=job_day).last
    )()

    if not overtime:
        await message.answer('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–∏ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–∫–∏')
        await state.clear()
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ
    if message.text:
        overtime.proof = message.text
        await sync_to_async(overtime.save)()
    elif message.photo:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        downloaded_file = await message.bot.download_file(file_info.file_path)

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"overtime_{customer.tg_id}_{today.strftime('%Y%m%d_%H%M%S')}.jpg"

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç File –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ImageField
        image_file = File(BytesIO(downloaded_file.read()), name=filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await sync_to_async(overtime.selfie.save)(filename, image_file, save=True)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –∫–∞–∫ proof
        if message.caption:
            overtime.proof = message.caption
            await sync_to_async(overtime.save)()

    await message.answer('‚úÖ –°–≤–µ—Ä—Ö—É—Ä–æ—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    await state.clear()
    await show_menu(message)


@menu_router.callback_query(F.data == 'advance_request')
async def start_advance_request(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdvanceStates.waiting_amount)
    await callback.message.answer('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞–≤–∞–Ω—Å–∞:')
    await callback.answer()


@menu_router.message(AdvanceStates.waiting_amount, F.text)
async def process_advance_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
            return

        await state.update_data(amount=amount)
        await state.set_state(AdvanceStates.waiting_reason)
        await message.answer('üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –∞–≤–∞–Ω—Å–∞:')

    except ValueError:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É')


@menu_router.message(AdvanceStates.waiting_reason, F.text)
async def process_advance_reason(message: Message, state: FSMContext):
    customer = await sync_to_async(Customer.objects.filter(tg_id=message.from_user.id).first)()
    data = await state.get_data()
    amount = data.get('amount')

    advance = Advance(
        customer=customer,
        amount=amount,
        reason=message.text
    )
    await sync_to_async(advance.save)()

    await state.clear()
    await message.answer('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    await show_menu(message)


@menu_router.callback_query(F.data == 'my_money')
async def show_my_money(callback: CallbackQuery):
    customer = await sync_to_async(Customer.objects.filter(tg_id=callback.from_user.id).first)()

    if not customer:
        await callback.answer('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞; –∏–Ω–∞—á–µ ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—É—é
    if customer.hourly_rate is not None:
        rate = customer.hourly_rate
    else:
        hourly_rate_obj = await sync_to_async(HourlyRate.load)()
        rate = hourly_rate_obj.cash_per_hour

    paid_hours = await sync_to_async(
        lambda: sum(jh.work_hours for jh in JobHours.objects.filter(customer=customer, paid=True))
    )()

    unpaid_hours = await sync_to_async(
        lambda: sum(jh.work_hours for jh in JobHours.objects.filter(customer=customer, paid=False))
    )()

    paid_overtime = await sync_to_async(
        lambda: sum(jh.work_hours for jh in JobOvertimeHours.objects.filter(customer=customer, paid=True))
    )()

    unpaid_overtime = await sync_to_async(
        lambda: sum(jh.work_hours for jh in JobOvertimeHours.objects.filter(customer=customer, paid=False))
    )()

    advances = await sync_to_async(
        lambda: sum(adv.amount for adv in Advance.objects.filter(customer=customer, accepted=True))
    )()

    total_earned = (paid_hours + unpaid_hours + paid_overtime + unpaid_overtime) * rate
    current_balance = customer.balance

    text = (
        f'üíµ –í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã:\n\n'
        f'üìä –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: {paid_hours + unpaid_hours:.1f}—á\n'
        f'‚è∞ –°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ: {paid_overtime + unpaid_overtime:.1f}—á\n'
        f'üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {total_earned:.2f} —Å–æ–º\n'
        f'üí∏ –í—ã–¥–∞–Ω–æ –∞–≤–∞–Ω—Å–æ–≤: {advances:.2f} —Å–æ–º\n'
        f'üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} —Å–æ–º\n\n'
        f'*–°—Ç–∞–≤–∫–∞: {rate} —Å–æ–º/—á–∞—Å'
    )

    await callback.message.answer(text)
    await callback.answer()


@menu_router.callback_query(F.data == 'dispute_request')
async def start_dispute(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DisputeStates.waiting_reason)
    await callback.message.answer('‚ö° –û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–æ—Ä–∞ (–ø—Ä–æ–±–ª–µ–º—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏, —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∏ —Ç.–¥.):')
    await callback.answer()


@menu_router.message(DisputeStates.waiting_reason, F.text)
async def process_dispute_reason(message: Message, state: FSMContext):
    customer = await sync_to_async(Customer.objects.filter(tg_id=message.from_user.id).first)()

    dispute = Dispute(
        customer=customer,
        reason=message.text
    )
    await sync_to_async(dispute.save)()

    await state.clear()
    await message.answer('‚úÖ –°–ø–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.')
    await show_menu(message)


@menu_router.message(Command('cancel'))
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=ReplyKeyboardRemove())
    await show_menu(message)
